<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux配置SSH密钥连接GitHub仓库(以Manjaro为例)</title>
    <link href="/2025/07/13/250713/"/>
    <url>/2025/07/13/250713/</url>
    
    <content type="html"><![CDATA[<p>最近给笔记本刷了Manjaro&#x2F;Windows双系统，所以需要在Manjaro上重新配置一下开发环境，但是在配置git的时候发现官方教程不知道什么时候更新了，既然如此，干脆记录一下官方推荐的新的配置方案应该怎么用。毕竟通过ssh的方式推送代码速度更快，还不用每次都输入密码。</p><hr><h2 id="生成新SSH密钥对"><a href="#生成新SSH密钥对" class="headerlink" title="生成新SSH密钥对"></a>生成新SSH密钥对</h2><p>由于是新系统，自然不用检查以前的密钥，那么就直接开始。</p><p>首先推荐进入<code>～/.ssh</code>目录，这是ssh密钥的默认保存位置，可以方便一下待会儿在重命名步骤的操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br></code></pre></td></tr></table></figure><p>执行下面的命令生成新的密钥，记得将<code>youremail@email.com</code>替换为登录GitHub账号时的邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;youremail@email.com&quot;</span><br></code></pre></td></tr></table></figure><p>这里注意一下，官方教程更新后推荐使用Ed25519算法来生成密钥，关于Ed25519这个算法，可以参考<a href="https://ed25519.cr.yp.to/">官网</a>的介绍，我这里简单贴出来一下：</p><p><img src="https://raw.githubusercontent.com/YangYuS8/Geneden-Img/main/img/20250713072719326.webp" alt="image-20250713072719195"></p><p class="note note-info">如果你使用的是不支持 Ed25519 算法的旧系统，请执行以下命令使用RSA算法加密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;youremail@email.com&quot;</span><br></code></pre></td></tr></table></figure><p>运行ssh-keygen后，系统会提示你选择密钥保存的位置，这里由于我们之前已经进入了密钥的默认保存位置，所以就不用写前面的绝对路径了(当然，如果你要更改保存位置的话另说)。为了能更好的区分密钥，我个人推荐给默认密钥重命名为<code>id_ed25519_github</code>，这样既能避免以后生成别的密钥时重复写入到同一个文件(比如生成AUR的密钥)，又能清晰明了的标明每个密钥对应的平台，以后删起来也方便。</p><p class="note note-info">注意：如果刚才是使用RSA加密的密钥，最好重命名为id_rsa_github，避免弄混</p><p>接下来系统还会询问是否要输入密码来保护密钥，虽然确实可以增加安全性，但是会变成每次使用SSH密钥都需要输入密码，很明显这违背了我使用密钥的初心(懒得输密码)，因此我一般直接回车就行。</p><p>密钥生成完成后，使用<code>ls -l</code>命令可以看到刚才生成的一对密钥：私钥<code>id_ed25519_github</code>和公钥<code>id_ed25519_github.pub</code></p><hr><h2 id="将SSH私钥添加到ssh-agent"><a href="#将SSH私钥添加到ssh-agent" class="headerlink" title="将SSH私钥添加到ssh-agent"></a>将SSH私钥添加到ssh-agent</h2><p>我们需要将密钥添加到ssh代理，先执行下面的命令启动ssh代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br></code></pre></td></tr></table></figure><p class="note note-primary">  正常情况下会输出`Agent pid xxxxx`，说明启动成功了，如果没有成功，可以试试下面的其他命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> ssh-agent bash<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> ssh-agent zsh<br></code></pre></td></tr></table></figure><p>启动ssh代理后，执行下面的命令将SSH私钥添加到ssh-agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add ~/.ssh/id_ed25519_github<br></code></pre></td></tr></table></figure><p>添加成功的输出类似于<code>Identity added: ~/.ssh/id_ed25519_github (youremail@email.com)</code></p><p>接下来我们需要编辑一下<code>～/.ssh/config</code>，如果没有这个文件自己创建一个即可，将下面的内容复制到文件中，只需要注意一下密钥的路径和名称是否对应：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github<br>HostName github.com<br>User git<br>IdentityFile ~/.ssh/id_ed25519_github<br>IdentitiesOnly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>修改完成后，我们本地的配置基本就完成了。</p><hr><h2 id="将SSH公钥添加到GitHub账户"><a href="#将SSH公钥添加到GitHub账户" class="headerlink" title="将SSH公钥添加到GitHub账户"></a>将SSH公钥添加到GitHub账户</h2><p>官网推荐的是使用<a href="https://docs.github.com/zh/github-cli/github-cli/about-github-cli">GitHub CLI</a>添加，但是我并不是很喜欢，因此这里还是用网页的方式添加吧。</p><p>登录GitHub官网后，通过<a href="https://github.com/settings/keys">这个链接</a>进入SSH密钥的设置页面，我们点击右上角的<code>New SSH key</code>添加公钥</p><p><img src="https://raw.githubusercontent.com/YangYuS8/Geneden-Img/main/img/20250713090659334.webp" alt="image-20250713090659258"></p><p>来到<code>Add new SSH Key</code>页面后，这里有三个可以配置的选项：</p><ul><li>Title：这个公钥的别名，我个人一般习惯写设备名，方便后续更换设备后删除；</li><li>Key type：保持默认即可；</li><li>Key：这里需要填入公钥<code>id_ed25519_github.pub</code>中的内容。</li></ul><p>我们可以执行下面的命令获取公钥内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_ed25519_github.pub<br></code></pre></td></tr></table></figure><p>输出的内容类似于<code>ssh-ed25519 xxx...xxx youremail@email.com</code>，将这一长串全部复制粘贴到Key的位置：</p><p><img src="https://raw.githubusercontent.com/YangYuS8/Geneden-Img/main/img/20250713091933053.webp" alt="image-20250713091932956"></p><p>最后点击<code>Add SSH Key</code>就完成添加了。</p><hr><h2 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h2><p>完成添加后，我们可以执行下面的命令验证是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com <br></code></pre></td></tr></table></figure><p>不出意外的话，输出应该是下面这样：</p><p><img src="https://raw.githubusercontent.com/YangYuS8/Geneden-Img/main/img/20250713092410143.webp" alt="image-20250713092410074"></p><p>至此，我们就完成了整个配置SSH密钥的过程……吗？</p><hr><h2 id="配置自动添加密钥"><a href="#配置自动添加密钥" class="headerlink" title="配置自动添加密钥"></a>配置自动添加密钥</h2><p>说实话，本来这篇博客已经写完了，就在我已经美滋滋的配置完Hexo的格式准备推送文章时，突然又发现了一个问题：如果我开了一个新终端，ssh-agent的代理是不会保留的，也就是说， 当我每次想用ssh密钥连接时，都需要手动完成一遍启动代理、加载私钥的过程，非常麻烦。为了解决这个问题，我稍微琢磨了一下，找到了一种解决方案。</p><p>首先，我们需要编辑shell 配置文件（根据你的 shell 选择）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加到 ~/.bashrc 或 ~/.zshrc</span><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$SSH_AUTH_SOCK</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>   <span class="hljs-comment"># 启动 SSH agent</span><br>   <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span> &gt; /dev/null<br>   <span class="hljs-comment"># 自动添加密钥</span><br>   ssh-add ~/.ssh/id_ed25519_github 2&gt;/dev/null<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>这里注意一下，如果你有多个私钥，可以复制第6行代码，修改中间的文件名，然后接在第6行下面，就像下面这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$SSH_AUTH_SOCK</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span> &gt; /dev/null<br>   ssh-add ~/.ssh/id_ed25519_github 2&gt;/dev/null<span class="hljs-comment"># 添加GitHub私钥</span><br>   ssh-add ~/.ssh/id_ed25519_gitee 2&gt;/dev/null<span class="hljs-comment"># 添加Gitee私钥</span><br>   ssh-add ~/.ssh/id_ed25519_gitlab 2&gt;/dev/null<span class="hljs-comment"># 添加GitLab私钥</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>然后应用配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc  <span class="hljs-comment"># 或 source ~/.zshrc</span><br></code></pre></td></tr></table></figure><p>最后再新开一个终端，执行下面的命令验证是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add -l            <span class="hljs-comment"># 应显示已加载密钥</span><br>ssh -T git@github.com <span class="hljs-comment"># 应显示成功消息</span><br></code></pre></td></tr></table></figure><p>至此，才是真正完成了所有配置SSH密钥的过程，虽然本篇是以Manjaro和GitHub为例，但对于其他Linux系统和其他需要ssh密钥连接的平台其实基本也是通用的。</p><blockquote><p>参考文献：</p><ul><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub文档 - 生成新的 SSH 密钥并将其添加到 ssh-agent</a></li><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">GitHub文档 - 新增 SSH 密钥到 GitHub 帐户</a></li><li><a href="https://ed25519.cr.yp.to/">Ed25519：高速高安全签名</a></li><li><a href="https://www.cnblogs.com/kiwiblog/p/18341759">博客园 - github添加ssh密钥，通过ssh方式推送代码</a></li></ul><p>文章背景及封面作者：</p><ul><li><a href="https://www.pixiv.net/users/64408268">匣子</a></li></ul><p>转载请注明作者及原页面链接</p></blockquote><p><img src="https://raw.githubusercontent.com/YangYuS8/Geneden-Img/main/post/20250713/source_img.webp" alt="封面"></p>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>ssh</tag>
      
      <tag>GitHub</tag>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
